These are some notes about contributing to payjoin, could also apply to other opensource projects

Dan's Feedback:
   I've got some comments that the attempts might be leaning a bit on llms to do both the code and the writing. Now I definitely use LLMs as leverage but they can also cause problems if their output isn't put back through a human filter before they make it to the PR. I'd recommend dialing in the PRs as much as possible, making sure commit messages are relevant, concise, and revised by you, and follow the guide we have in contributing md (https://cbea.ms/git-commit/).
   Remove merge commits from the history using git rebase, and keep rustfmt changes in the commits that make changes.

The Checks for every pull_request to payjoin:
Format check: rustup run nightly rustfmt
Lint check: ./contrib/lint.sh
Test rust 1.63.0 check: rustup run 1.63.0 cargo test --package payjoin --lib uri
Test stable check: cargo test --package payjoin --lib uri
Nightly check: rustup run nightly cargo test --package payjoin --lib uri
Lastly run Code coverage check: cargo tarpaulin --packages payjoin --lib --tests

Commit msg standard for payjoin:
Make sure commit messages are relevant, concise, and revised by you, and follow the guide we have in README.md (https://cbea.ms/git-commit/).



Github MCP command list:
    add_issue_comment
    Add a comment to an existing issue

    create_branch
    Create a new branch in a GitHub repository

    create_issue
    Create a new issue in a GitHub repository

    create_or_update_file
    Create or update a single file in a GitHub repository

    create_pull_request
    Create a new pull request in a GitHub repository

    create_pull_request_review
    Create a review on a pull request

    create_repository
    Create a new GitHub repository in your account

    fork_repository
    Fork a GitHub repository to your account or specified organization

    get_code_scanning_alert
    Get details of a specific code scanning alert in a GitHub repository.

    get_file_contents
    Get the contents of a file or directory from a GitHub repository

    get_issue
    Get details of a specific issue in a GitHub repository.

    get_issue_comments
    Get comments for a GitHub issue

    get_me
    Get details of the authenticated GitHub user. Use this when a request includes "me", "my"...

    get_pull_request
    Get details of a specific pull request

    get_pull_request_comments
    Get the review comments on a pull request

    get_pull_request_files
    Get the list of files changed in a pull request

    get_pull_request_reviews
    Get the reviews on a pull request

    get_pull_request_status
    Get the combined status of all status checks for a pull request

    list_code_scanning_alerts
    List code scanning alerts in a GitHub repository.

    list_commits
    Get list of commits of a branch in a GitHub repository

    list_issues
    List issues in a GitHub repository with filtering options

    list_pull_requests
    List and filter repository pull requests

    merge_pull_request
    Merge a pull request

    push_files
    Push multiple files to a GitHub repository in a single commit

    search_code
    Search for code across GitHub repositories

    search_issues
    Search for issues and pull requests across GitHub repositories

    search_repositories
    Search for GitHub repositories

    search_users
    Search for GitHub users

    update_issue
    Update an existing issue in a GitHub repository

    update_pull_request_branch
    Update a pull request branch with the latest changes from the base branch

    get_file_contents
    Get the contents of a file or directory from a GitHub repository

    create_or_update_file
    Create or update a single file in a GitHub repository


Flow for syncing with upstream when starting to work on a new branch:
1. Checkout to your master branch and then fetch the latest upstream changes

>>>> git checkout master

>>>> git fetch upstream

Then check status

>>>> git status
You should see something like:

mac@OPTIMUS-PRIME rust-payjoin-1 % git status
On branch master
Your branch is up to date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .DS_Store
        contributing.txt
        learnings.md
        querying_the_llm.txt
nothing added to commit but untracked files present (use "git add" to track)

To determine which branch you're on and whether it's your local master or upstream payjoin master:

1. Run 'git branch -vv' to see all branches and their tracking information
2. Look for the branch marked with an asterisk (*) - this is your current branch
3. Check if it shows '[origin/master]' or '[upstream/master]' next to it
4. If neither, it's a local branch not tracking any remote

Example output interpretation:
* master    abc1234 [origin/master] Latest commit message   -> Your local master
* master    def5678 [upstream/master] Latest commit message -> Upstream payjoin master

mac@OPTIMUS-PRIME rust-payjoin-1 % git branch -vv
  add-inputpair-tests  cf5a5fa feat(receive): Add tests for InputPair constructors
  feat/inputpair-tests 8435e16 [origin/feat/inputpair-tests: behind 3] correct Value trait implementation in v2/mod.rs
* master               036dfaa [origin/master] Merge remote-tracking branch 'upstream/master'
  uri_errors           c4317e3 [origin/uri_errors] Improve error handling for URI parsing

2. Rebase your local master branch on top of the latest changes

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git rebase upstream/master
Successfully rebased and updated refs/heads/master.

3. Then, switch back to your feature branch and rebase it on top of the updated master:
First: Create and checkout a new branch for your issue

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git checkout -b testsss_branch
Switched to a new branch 'testsss_branch'

Now in your feature branch rebase it on top of the updated master:

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git rebase master
Current branch testsss_branch is up to date.

In case of a situation where your local master branch and origin/master have diverged:
Handle it like this:

First, see what commits are different:
>>> git log --oneline --graph --all

If your branches have diverged, we have a few options:
Pull with rebase from origin:
>>> git pull --rebase origin master

mac@OPTIMUS-PRIME rust-payjoin-1 % git pull --rebase origin master
From https://github.com/Johnosezele/rust-payjoin
 * branch            master     -> FETCH_HEAD
warning: skipped previously applied commit ae175df
hint: use --reapply-cherry-picks to include skipped commits
hint: Disable this message with "git config advice.skippedCherryPicks false"
Successfully rebased and updated refs/heads/testsss_branch.

Great! Now you can switch back to your feature branch and rebase it on top of the updated master:
>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git checkout testsss_branch
Already on 'testsss_branch'

Since we have gotten your master branch synced with origin, we can then:
>>> git rebase master

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git rebase master
warning: skipped previously applied commit cf5a5fa
warning: skipped previously applied commit 7267632
hint: use --reapply-cherry-picks to include skipped commits
hint: Disable this message with "git config advice.skippedCherryPicks false"
Successfully rebased and updated refs/heads/testsss_branch.

Perfect! Your branches are now properly synced.

4. Push your changes to the remote repository
If you want to push changes to your remote repository, you can use:
>>> git push origin testsss_branch


This will create the testsss_branch branch on your remote repository (if it doesn't exist) 
and push your local changes to it.

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git push origin testsss_branch
Enumerating objects: 11, done.
Counting objects: 100% (11/11), done.
Delta compression using up to 8 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 3.19 KiB | 1.06 MiB/s, done.
Total 6 (delta 4), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
remote: 
remote: Create a pull request for 'testsss_branch' on GitHub by visiting:
remote:      https://github.com/Johnosezele/rust-payjoin/pull/new/testsss_branch
remote: 
To https://github.com/Johnosezele/rust-payjoin.git
 * [new branch]      testsss_branch -> testsss_branch

Then you can create PR.

SOME NOTES:
>> Pushing a branch means uploading commits from your local repository to a remote repository.
>> Publishing a branch specifically refers to pushing a local branch to a remote for the first 
time, making it available for other collaborators.

To publish (push for the first time) this branch to your remote (origin):
>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git push -u origin testsss_branch
branch 'testsss_branch' set up to track 'origin/testsss_branch'.
Everything up-to-date

The -u (or --set-upstream) option associates your local branch with the remote branch, 
so future pushes and pulls can be done simply with:

git push
git pull


To verify status of branches:
Check Status of Branches:
To verify your local and remote branches:

For Local branches:
>>> git branch

For Remote branches:
>>> git branch -r


To delete a local branch:
First, ensure you're not currently on the branch you want to delete:
>>> git checkout master

Then delete your branch locally using:
>>> git branch -d testsss_branch

If it complains about unmerged changes and you're sure you want to delete it anyway, force delete with:
>>> git branch -D testsss_branch

To delete the branch from remote (e.g., origin):
Run the following:
>>> git push origin --delete testsss_branch

>>>mac@OPTIMUS-PRIME rust-payjoin-1 % git branch -d testsss_branch
Deleted branch testsss_branch (was ae175df).
>>>mac@OPTIMUS-PRIME rust-payjoin-1 % git push origin --delete testsss_branch
To https://github.com/Johnosezele/rust-payjoin.git
 - [deleted]         testsss_branch

To pull the latest upstream changes into your master branch, follow these steps:
>>> git branch
You should see * master indicating the active branch.

Fetch latest changes from upstream:
First, you should have an upstream remote configured. Confirm this by running:
>>> git remote -v

>>> mac@OPTIMUS-PRIME rust-payjoin-1 % git remote -v
origin  https://github.com/Johnosezele/rust-payjoin.git (fetch)
origin  https://github.com/Johnosezele/rust-payjoin.git (push)
upstream        https://github.com/payjoin/rust-payjoin.git (fetch)
upstream        https://github.com/payjoin/rust-payjoin.git (push)

If you see something like:
upstream    https://github.com/<original_repo>/<repo>.git (fetch)
upstream    https://github.com/<original_repo>/<repo>.git (push)

then you’re set. Otherwise, if you don't have an upstream, set it with:
>>> git remote add upstream <original-repo-url>
(Replace <original-repo-url> with the URL of the original repository.)

Pull (fetch + merge) latest changes from upstream: [Ensure to stash any unnecessary changes here]
Now, update your local copy of the master branch with the latest changes:
>>> git pull upstream master
This command does two things:
Fetches the latest commits from the upstream repository.
Merges these commits into your local master branch.

Push the updated master branch back to your own fork (origin), if needed:
If you’re maintaining your own fork on GitHub, synchronize it by pushing the latest changes to your fork’s master branch:
>>> git push origin master

or basically run:
git pull 
git push

